server.port=9205
spring.application.name=retry

#auto create topics (with 1 partition) only using for error topics
spring.cloud.stream.kafka.streams.binder.replication-factor=1
spring.kafka.streams.state-dir=/tmp/retry/instance-1

# <-- Person -->
#  IN
#   -0
spring.cloud.stream.bindings.processPersonEvent-in-0.destination=${bindings.consumer.processPersonEvent-in-0.destination:bcm.test.queuing.person.in}
spring.cloud.stream.bindings.processPersonEvent-in-0.content-type=${bindings.consumer.processPersonEvent-in-0.content-type:application/json}
spring.cloud.stream.kafka.streams.bindings.processPersonEvent-in-0.consumer.application-id=${bindings.consumer.processPersonEvent-in-0.application-id:bcm-test-person}
spring.cloud.stream.kafka.streams.bindings.processPersonEvent-in-0.consumer.enable-dlq=true
#   -1
spring.cloud.stream.bindings.processPersonEvent-in-1.destination=${bindings.consumer.processPersonEvent-in-1.destination:bcm.test.queuing.person.in.redirect}
spring.cloud.stream.kafka.streams.bindings.processPersonEvent-in-1.consumer.application-id=${bindings.consumer.processPersonEvent-in-1.application-id:bcm-test-redirect}
#  OUT
#   -0
spring.cloud.stream.bindings.processPersonEvent-out-0.destination=${bindings.producer.processPersonEvent-out-0.destination:bcm.test.queuing.person.out}
spring.cloud.stream.bindings.processPersonEvent-out-0.content-type=${bindings.producer.processPersonEvent-out-0.content-type:application/json}

# <-- Device -->
spring.cloud.stream.bindings.processDeviceEvent-in-0.destination=${bindings.consumer.processDeviceEvent-in-0.destination:bcm.test.queuing.device.in}
spring.cloud.stream.bindings.processDeviceEvent-in-0.content-type=${bindings.consumer.processDeviceEvent-in-0.content-type:application/json}
spring.cloud.stream.kafka.streams.bindings.processDeviceEvent-in-0.consumer.application-id=${bindings.consumer.processDeviceEvent-in-0.application-id:bcm-test-device}
spring.cloud.stream.kafka.streams.bindings.processDeviceEvent-in-0.consumer.enable-dlq=true
spring.cloud.stream.bindings.processDeviceEvent-out-0.destination=${bindings.producer.processDeviceEvent-out-0.destination:bcm.test.queuing.device.out}
spring.cloud.stream.bindings.processDeviceEvent-out-0.content-type=${bindings.producer.processDeviceEvent-out-0.content-type:application/json}

### Common spring cloud kafka streams properties
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=${binder.configuration.commit-interval-ms:100}
spring.cloud.stream.kafka.streams.binder.configuration.application.server=${binder.configuration.application-server:localhost:9205}
spring.cloud.stream.kafka.streams.binder.configuration.processing.guarantee=exactly_once
spring.cloud.stream.kafka.streams.binder.state-store-retry.max-attempts=5
spring.cloud.stream.kafka.streams.binder.state-store-retry.backoff-period=5000
spring.cloud.stream.kafka.streams.binder.deserialization-exception-handler=sendtodlq

spring.cloud.stream.function.definition=${function.name:processPersonEvent;processDeviceEvent}

spring.cloud.stream.kafka.binder.brokers=${kafka.brokers:127.0.0.1:9092}
spring.kafka.bootstrap-servers=${kafka.brokers:127.0.0.1:9092}
spring.cloud.stream.kafka.streams.binder.brokers=${kafka.brokers:127.0.0.1:9092}

# Actuator properties
management.server.port=${actuator-server-port:9205}
management.endpoint.health.probes.enabled=true
management.endpoints.web.exposure.include=${actuator-endpoints-web-include:health,metrics,prometheus,configprops,kafkastreamstopology}
management.endpoint.prometheus.enabled=${monitoring.enabled:true}
management.metrics.export.prometheus.enabled=${monitoring.enabled:true}
#management.endpoints.web.base-path=${monitoring.base-path:/actuator}
#monitoring.pod.name=${POD_NAME:localhost}
#monitoring.pod.namespace=${kubernetes.namespace:local}

# Retry State Store connection
retry.kafka.state-store-connection.max-retry=${retry.max-retry:5}
retry.kafka.state-store-connection.delay=${retry.delay:30000}
retry.kafka.state-store-connection.max-delay=${retry.max-delay:30000}
retry.kafka.state-store-connection.multiplier=${retry.multipliers:1}

# Retry Device Processing
#  9 max retries should work, as it is still under max pool timeout (5 mins)
retry.kafka.process-device.max-retry=${retry.max-retry:9}
retry.kafka.process-device.delay=${retry.delay:30000}
retry.kafka.process-device.max-delay=${retry.max-delay:30000}
retry.kafka.process-device.multiplier=${retry.multipliers:1}
