server.port=9210
spring.application.name=retrier

#auto create topics (with 1 partition) only using for error topics
spring.cloud.stream.kafka.streams.binder.replication-factor=1
spring.kafka.streams.state-dir=/tmp/retrier/instance-1

# <-- Person -->
#  IN
#   -0  MAIN RETRY TOPIC - KStream
spring.cloud.stream.bindings.retryProcessPersonEvent-in-0.destination=${bindings.consumer.retryProcessPersonEvent-in-0.destination:bcm.test.queuing.person.in.retry}
spring.cloud.stream.bindings.retryProcessPersonEvent-in-0.content-type=${bindings.consumer.retryProcessPersonEvent-in-0.content-type:application/json}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-0.consumer.application-id=${bindings.consumer.retryProcessPersonEvent-in-0.application-id:bcm-test-person-retry}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-0.consumer.enable-dlq=true
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-0.consumer.value-serde=test.bcm.retrier.example.kafka.util.AppSerdes$CustomPersonSerde
#   -1  DEVICE CHANGELOG - Ktable
spring.cloud.stream.bindings.retryProcessPersonEvent-in-1.destination=${bindings.consumer.retryProcessPersonEvent-in-1.destination:bcm-test-device-device-ktable-changelog}
spring.cloud.stream.bindings.retryProcessPersonEvent-in-1.content-type=${bindings.consumer.retryProcessPersonEvent-in-1.content-type:application/json}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-1.consumer.application-id=${bindings.consumer.retryProcessPersonEvent-in-1.application-id:bcm-test-device-retry}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-1.consumer.materialized-as=device-store
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-1.consumer.value-serde=test.bcm.retrier.example.kafka.util.AppSerdes$CustomDeviceOutSerde
#   -2
spring.cloud.stream.bindings.retryProcessPersonEvent-in-2.destination=${bindings.consumer.retryProcessPersonEvent-in-2.destination:global-person-retry-counter}
spring.cloud.stream.bindings.retryProcessPersonEvent-in-2.content-type=${bindings.consumer.retryProcessPersonEvent-in-2.content-type:application/json}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-2.consumer.application-id=${bindings.consumer.retryProcessPersonEvent-in-2.application-id:bcm-test-person-retry-counter}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-2.consumer.materialized-as=person-retry-counter-store
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-2.consumer.value-serde=test.bcm.retrier.example.kafka.util.AppSerdes$CustomEventCounterSerde
#   -3
spring.cloud.stream.bindings.retryProcessPersonEvent-in-3.destination=${bindings.consumer.retryProcessPersonEvent-in-3.destination:bcm.test.queuing.person.in.redirect}
spring.cloud.stream.kafka.streams.bindings.retryProcessPersonEvent-in-3.consumer.application-id=${bindings.consumer.retryProcessPersonEvent-in-3.application-id:bcm-test-redirect-retry}
#  OUT
#   -0
spring.cloud.stream.bindings.retryProcessPersonEvent-out-0.destination=${bindings.producer.retryProcessPersonEvent-out-0.destination:bcm.test.queuing.person.out}
spring.cloud.stream.bindings.retryProcessPersonEvent-out-0.content-type=${bindings.producer.retryProcessPersonEvent-out-0.content-type:application/json}

### Common spring cloud kafka streams properties
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=${binder.configuration.commit-interval-ms:100}
spring.cloud.stream.kafka.streams.binder.configuration.application.server=${binder.configuration.application-server:localhost:9210}
spring.cloud.stream.kafka.streams.binder.configuration.processing.guarantee=exactly_once
spring.cloud.stream.kafka.streams.binder.state-store-retry.max-attempts=1
spring.cloud.stream.kafka.streams.binder.state-store-retry.backoff-period=5000
spring.cloud.stream.kafka.streams.binder.deserialization-exception-handler=sendtodlq

spring.cloud.stream.function.definition=${function.name:retryProcessPersonEvent}

spring.cloud.stream.kafka.binder.brokers=${kafka.brokers:127.0.0.1:9092}
spring.kafka.bootstrap-servers=${kafka.brokers:127.0.0.1:9092}
spring.cloud.stream.kafka.streams.binder.brokers=${kafka.brokers:127.0.0.1:9092}

# Actuator properties
management.server.port=${actuator-server-port:9210}
management.endpoint.health.probes.enabled=true
management.endpoints.web.exposure.include=${actuator-endpoints-web-include:health,metrics,prometheus,configprops,kafkastreamstopology}
management.endpoint.prometheus.enabled=${monitoring.enabled:true}
management.metrics.export.prometheus.enabled=${monitoring.enabled:true}
#management.endpoints.web.base-path=${monitoring.base-path:/actuator}
#monitoring.pod.name=${POD_NAME:localhost}
#monitoring.pod.namespace=${kubernetes.namespace:local}